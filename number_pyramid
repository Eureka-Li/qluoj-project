//题目描述

//在古老的数学王国中，数字金字塔被视为智慧的象征。现在你需要编写程序来构建这种金字塔。给定金字塔的层数n，金字塔的构造规则如下：
//第i层(1≤i≤n)包含2i-1个数字
//数字从1开始递增到i，然后递减回到1
//每层需要居中对齐，使得金字塔呈现完美的等腰三角形形状
//输入格式
//输入只有一个正整数n。
//输出格式
//打印数字金字塔图形，其中每个数字之间有一个空格。
#include <stdio.h>

// 计算数字位数
int digit_count(int x) {
    int count = 0;
    if (x == 0) return 1;
    while (x) {
        x /= 10;
        count++;
    }
    return count;
}

int main() {
    int n;
    scanf("%d", &n);

    int max_digit = digit_count(n);

    for (int i = 1; i <= n; i++) {
        // 当前行数字总数
        int num_count = 2 * i - 1;

        // 当前行内容长度（数字宽度+空格）
        int line_width = 0;
        for (int j = 1; j <= i; j++) line_width += digit_count(j) + 1;
        for (int j = i - 1; j >= 1; j--) line_width += digit_count(j) + 1;
        line_width--; // 最后一个数字不用空格

        // 总宽度（底层宽度）
        int total_width = 0;
        for (int j = 1; j <= n; j++) total_width += digit_count(j) + 1;
        for (int j = n - 1; j >= 1; j--) total_width += digit_count(j) + 1;
        total_width--; // 最后一位不用空格

        // 打印前导空格
        for (int s = 0; s < (total_width - line_width) / 2; s++) {
            printf(" ");
        }

        // 打印递增数字
        for (int j = 1; j <= i; j++) {
            printf("%d", j);
            printf(" ");
        }
        // 打印递减数字
        for (int j = i - 1; j >= 1; j--) {
            printf("%d", j);
            if (j != 1) printf(" ");
        }

        printf("\n");
    }

    return 0;
}